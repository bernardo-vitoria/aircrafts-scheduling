{"ast":null,"code":"import create from \"zustand\";\n\nconst removeFlight = (a, b) => a !== b;\n\nconst useRotationStack = create(set => ({\n  flightsRotation: [],\n  addFlightToRotation: value => set(state => ({\n    flightsRotation: [...state.flightsRotation, value],\n    availableFlights: state.availableFlights.filter(flight => flight.id !== value.id)\n  })),\n  removeFlightFromRotation: value => set(state => ({\n    flightsRotation: state.flightsRotation.filter(({\n      id\n    }) => value.id !== id),\n    availableFlights: [...state.availableFlights, value]\n  })),\n  selectedAircraft: undefined,\n  setSelectedAircraft: value => set({\n    selectedAircraft: value\n  }),\n  availableFlights: [],\n  setAvailableFlights: value => set({\n    availableFlights: value\n  })\n}));\nexport default useRotationStack;","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/aircraft-scheduling/src/store/useRotationStack.ts"],"names":["create","removeFlight","a","b","useRotationStack","set","flightsRotation","addFlightToRotation","value","state","availableFlights","filter","flight","id","removeFlightFromRotation","selectedAircraft","undefined","setSelectedAircraft","setAvailableFlights"],"mappings":"AAAA,OAAOA,MAAP,MAAiC,SAAjC;;AAGA,MAAMC,YAAY,GAAG,CAACC,CAAD,EAAWC,CAAX,KAAyBD,CAAC,KAAKC,CAApD;;AAYA,MAAMC,gBAAgB,GAAGJ,MAAM,CAC5BK,GAAD,KAAmC;AACjCC,EAAAA,eAAe,EAAE,EADgB;AAEjCC,EAAAA,mBAAmB,EAAGC,KAAD,IACnBH,GAAG,CAAEI,KAAD,KAAY;AACdH,IAAAA,eAAe,EAAE,CAAC,GAAGG,KAAK,CAACH,eAAV,EAA2BE,KAA3B,CADH;AAEdE,IAAAA,gBAAgB,EAAED,KAAK,CAACC,gBAAN,CAAuBC,MAAvB,CACfC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcL,KAAK,CAACK,EADhB;AAFJ,GAAZ,CAAD,CAH4B;AASjCC,EAAAA,wBAAwB,EAAGN,KAAD,IACxBH,GAAG,CAAEI,KAAD,KAAY;AACdH,IAAAA,eAAe,EAAEG,KAAK,CAACH,eAAN,CAAsBK,MAAtB,CAA6B,CAAC;AAACE,MAAAA;AAAD,KAAD,KAAUL,KAAK,CAACK,EAAN,KAAYA,EAAnD,CADH;AAEdH,IAAAA,gBAAgB,EAAE,CAAC,GAAGD,KAAK,CAACC,gBAAV,EAA4BF,KAA5B;AAFJ,GAAZ,CAAD,CAV4B;AAcjCO,EAAAA,gBAAgB,EAAEC,SAde;AAejCC,EAAAA,mBAAmB,EAAGT,KAAD,IAAWH,GAAG,CAAC;AAAEU,IAAAA,gBAAgB,EAAEP;AAApB,GAAD,CAfF;AAgBjCE,EAAAA,gBAAgB,EAAE,EAhBe;AAiBjCQ,EAAAA,mBAAmB,EAAGV,KAAD,IAAWH,GAAG,CAAC;AAAEK,IAAAA,gBAAgB,EAAEF;AAApB,GAAD;AAjBF,CAAnC,CAD6B,CAA/B;AAsBA,eAAeJ,gBAAf","sourcesContent":["import create, { SetState } from \"zustand\";\nimport { Aircraft, Flight } from \"../pages/MainPage/types\";\n\nconst removeFlight = (a: Flight,b :Flight) => a !== b;\n\ntype RotationStack = {\n  availableFlights: Flight[];\n  setAvailableFlights: (flights: Flight[]) => void;\n  flightsRotation: Flight[];\n  addFlightToRotation: (flight: Flight) => void;\n  removeFlightFromRotation: (flight: Flight) => void;\n  selectedAircraft?: Aircraft;\n  setSelectedAircraft: (aircraft: Aircraft) => void;\n};\n\nconst useRotationStack = create<RotationStack>(\n  (set: SetState<RotationStack>) => ({\n    flightsRotation: [],\n    addFlightToRotation: (value) =>\n      set((state) => ({\n        flightsRotation: [...state.flightsRotation, value],\n        availableFlights: state.availableFlights.filter(\n          (flight) => flight.id !== value.id\n        ),\n      })),\n    removeFlightFromRotation: (value) =>\n      set((state) => ({\n        flightsRotation: state.flightsRotation.filter(({id}) => value.id !==id),\n        availableFlights: [...state.availableFlights, value],\n      })),\n    selectedAircraft: undefined,\n    setSelectedAircraft: (value) => set({ selectedAircraft: value }),\n    availableFlights: [],\n    setAvailableFlights: (value) => set({ availableFlights: value }),\n  })\n);\n\nexport default useRotationStack;\n"]},"metadata":{},"sourceType":"module"}