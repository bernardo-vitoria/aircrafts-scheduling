{"ast":null,"code":"import create from \"zustand\";\nconst useRotationStack = create(set => ({\n  flightsRotation: [],\n  addFlightToRotation: value => set(_ref => {\n    let {\n      flightsRotation,\n      availableFlights\n    } = _ref;\n    return {\n      flightsRotation: [...flightsRotation, value].sort((a, b) => a.departuretime < b.departuretime ? -1 : 0),\n      availableFlights: availableFlights.filter(flight => flight.id !== value.id)\n    };\n  }),\n  removeFlightFromRotation: value => set(state => ({\n    flightsRotation: state.flightsRotation.filter(_ref2 => {\n      let {\n        id\n      } = _ref2;\n      return value.id !== id;\n    }),\n    availableFlights: [...state.availableFlights, value]\n  })),\n  selectedAircraft: undefined,\n  setSelectedAircraft: value => set({\n    selectedAircraft: value\n  }),\n  availableFlights: [],\n  setAvailableFlights: value => set({\n    availableFlights: value\n  })\n}));\nexport default useRotationStack;","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/aircrafts-scheduling/src/store/useRotationStack.ts"],"names":["create","useRotationStack","set","flightsRotation","addFlightToRotation","value","availableFlights","sort","a","b","departuretime","filter","flight","id","removeFlightFromRotation","state","selectedAircraft","undefined","setSelectedAircraft","setAvailableFlights"],"mappings":"AAAA,OAAOA,MAAP,MAAiC,SAAjC;AAaA,MAAMC,gBAAgB,GAAGD,MAAM,CAC5BE,GAAD,KAAmC;AACjCC,EAAAA,eAAe,EAAE,EADgB;AAEjCC,EAAAA,mBAAmB,EAAGC,KAAD,IACnBH,GAAG,CAAC,QAA2C;AAAA,QAA1C;AAAEC,MAAAA,eAAF;AAAmBG,MAAAA;AAAnB,KAA0C;AAC3C,WAAO;AACLH,MAAAA,eAAe,EAAE,CAAC,GAAGA,eAAJ,EAAqBE,KAArB,EAA4BE,IAA5B,CAAiC,CAACC,CAAD,EAAIC,CAAJ,KAChDD,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAApB,GAAoC,CAAC,CAArC,GAAyC,CAD1B,CADZ;AAILJ,MAAAA,gBAAgB,EAAEA,gBAAgB,CAACK,MAAjB,CACfC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcR,KAAK,CAACQ,EADhB;AAJb,KAAP;AAQH,GATE,CAH4B;AAajCC,EAAAA,wBAAwB,EAAGT,KAAD,IACxBH,GAAG,CAAEa,KAAD,KAAY;AACdZ,IAAAA,eAAe,EAAEY,KAAK,CAACZ,eAAN,CAAsBQ,MAAtB,CACf;AAAA,UAAC;AAAEE,QAAAA;AAAF,OAAD;AAAA,aAAYR,KAAK,CAACQ,EAAN,KAAaA,EAAzB;AAAA,KADe,CADH;AAIdP,IAAAA,gBAAgB,EAAE,CAAC,GAAGS,KAAK,CAACT,gBAAV,EAA4BD,KAA5B;AAJJ,GAAZ,CAAD,CAd4B;AAoBjCW,EAAAA,gBAAgB,EAAEC,SApBe;AAqBjCC,EAAAA,mBAAmB,EAAGb,KAAD,IAAWH,GAAG,CAAC;AAAEc,IAAAA,gBAAgB,EAAEX;AAApB,GAAD,CArBF;AAsBjCC,EAAAA,gBAAgB,EAAE,EAtBe;AAuBjCa,EAAAA,mBAAmB,EAAGd,KAAD,IAAWH,GAAG,CAAC;AAAEI,IAAAA,gBAAgB,EAAED;AAApB,GAAD;AAvBF,CAAnC,CAD6B,CAA/B;AA4BA,eAAeJ,gBAAf","sourcesContent":["import create, { SetState } from \"zustand\";\nimport { Aircraft, Flight } from \"../pages/MainPage/types\";\n\ntype RotationStack = {\n  availableFlights: Flight[];\n  setAvailableFlights: (flights: Flight[]) => void;\n  flightsRotation: Flight[];\n  addFlightToRotation: (flight: Flight) => void;\n  removeFlightFromRotation: (flight: Flight) => void;\n  selectedAircraft?: Aircraft;\n  setSelectedAircraft: (aircraft: Aircraft) => void;\n};\n\nconst useRotationStack = create<RotationStack>(\n  (set: SetState<RotationStack>) => ({\n    flightsRotation: [],\n    addFlightToRotation: (value) =>\n      set(({ flightsRotation, availableFlights }) => {\n          return {\n            flightsRotation: [...flightsRotation, value].sort((a, b) =>\n              a.departuretime < b.departuretime ? -1 : 0\n            ),\n            availableFlights: availableFlights.filter(\n              (flight) => flight.id !== value.id\n            ),\n          };\n      }),\n    removeFlightFromRotation: (value) =>\n      set((state) => ({\n        flightsRotation: state.flightsRotation.filter(\n          ({ id }) => value.id !== id\n        ),\n        availableFlights: [...state.availableFlights, value],\n      })),\n    selectedAircraft: undefined,\n    setSelectedAircraft: (value) => set({ selectedAircraft: value }),\n    availableFlights: [],\n    setAvailableFlights: (value) => set({ availableFlights: value }),\n  })\n);\n\nexport default useRotationStack;\n"]},"metadata":{},"sourceType":"module"}