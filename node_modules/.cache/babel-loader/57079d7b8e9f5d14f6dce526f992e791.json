{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useLocalStorage = ({\n  key,\n  initialValue\n}) => {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      console.log('localstora item', item); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n\n_s(useLocalStorage, \"cbiHaX+oxpskM9WXWlvyaMZU/Rs=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/challenge/src/hooks/useLocalStorage.ts"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","console","log","JSON","parse","error","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AASA,MAAMC,eAAqB,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,KAA0B;AAAA;;AACtD;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,IAA/B,EAHE,CAIF;;AACA,aAAOA,IAAI,GAAGM,IAAI,CAACC,KAAL,CAAWP,IAAX,CAAH,GAAsBH,YAAjC;AACD,KAND,CAME,OAAOW,KAAP,EAAc;AACd;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA,aAAOX,YAAP;AACD;AACF,GAZ6C,CAA9C,CAHsD,CAgBtD;AACA;;AACA,QAAMY,QAAQ,GAAIC,KAAD,IAAgB;AAC/B,QAAI;AACF;AACA,YAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KADnD,CAFE,CAIF;;AACAX,MAAAA,cAAc,CAACY,YAAD,CAAd,CALE,CAMF;;AACAV,MAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCU,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOH,KAAP,EAAc;AACd;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,GAbD;;AAcA,SAAO,CAACV,WAAD,EAAcW,QAAd,CAAP;AACD,CAjCD;;GAAMd,e;;AAmCJ,eAAeA,eAAf","sourcesContent":["import { useState } from \"react\";\n\ntype HookParams = {\n    key: string;\n    initialValue: any;\n};\n\ntype Hook = (params: HookParams) => any;\n\nconst useLocalStorage: Hook = ({key, initialValue}) =>  {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      console.log('localstora item', item);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: any) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\n  export default useLocalStorage;"]},"metadata":{},"sourceType":"module"}