{"ast":null,"code":"var _jsxFileName = \"/Users/bernardo.vitoria/projects/FE/challenge/src/pages/MainPage/ClientForm/ClientForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from \"@mui/material/Button\";\nimport { TextInput, DropdownSelection, DateSelection, AlertMessage } from \"../../../components\";\nimport './ClientForm.css';\nimport { useClientStore } from '../../../store';\nimport { useCountries } from '../../../hooks';\nimport { useForm, FormProvider } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FormControl } from '@mui/material';\nimport { useTranslation } from \"react-i18next\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yupResolver(yup.object({\n  Name: yup.string().required().trim(),\n  Surname: yup.string().required().trim(),\n  country: yup.string().required().trim(),\n  birthday: yup.date().required()\n}).required());\n\nconst getInitialState = () => ({\n  Name: '',\n  Surname: '',\n  country: '',\n  birthday: undefined\n});\n\nconst ClientForm = ({\n  clients,\n  setClients\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [alert, setAlert] = useState();\n  const countries = useCountries();\n  const defaultValues = getInitialState();\n  const methods = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    criteriaMode: \"all\",\n    resolver: schema,\n    defaultValues\n  });\n  const {\n    watch,\n    formState: {\n      errors\n    },\n    setError\n  } = methods;\n  const formData = watch();\n  const {\n    name,\n    setName,\n    surname,\n    setSurname,\n    country,\n    setCountry,\n    birthday,\n    setBirthday\n  } = useClientStore(state => ({\n    name: state.name,\n    setName: state.setName,\n    surname: state.surname,\n    setSurname: state.setSurname,\n    country: state.country,\n    setCountry: state.setCountry,\n    birthday: state.birthday,\n    setBirthday: state.setBirthday\n  }));\n  /*  const handleOnSave = () => {\n       if (formData.country === \"\"){\n        setError(\n          \"country\",\n          { type: \"focus\", message: t(\"clients:error\") },\n          { shouldFocus: true }\n        );\n        return;\n     }\n      \n       if (formData.birthday === \"\" || formData.birthday === undefined) {\n        setError(\n          \"birthday\",\n          { type: \"focus\", message: t(\"clients:error\") },\n          { shouldFocus: true }\n        );\n       return;\n       }\n        if (Object.keys(errors).length > 0) return;\n      const newClient = {\n       name: formData.Name,\n       surname: formData.Surname,\n       country: formData.country,\n       birthday: formData.birthday,\n     };\n      const birthdayDate = new Date(newClient.birthday);\n     const yearsOld = parseInt(format(new Date(), \"yyyy\")) - parseInt(format(birthdayDate, \"yyyy\"));\n     const birthdayDay = format(birthdayDate, \"dd\");\n     const birthdayMonth = format(birthdayDate, \"MM\");\n      const newAlert = t(\n       \"clients:form.alert\",\n       { name, country, birthdayDay, birthdayMonth, yearsOld }\n     );\n   \n     setAlert(newAlert);\n     setClients([...clients, newClient]);\n     setName(newClient.name);\n     setSurname(newClient.surname);\n     setCountry(newClient.country);\n     setBirthday(newClient.birthday);\n   };\n    */\n\n  return /*#__PURE__*/_jsxDEV(FormProvider, { ...methods,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"client-form\",\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          label: \"Name\",\n          defaultValue: \"Name Here\",\n          controllerName: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          label: \"Surname\",\n          defaultValue: \"Name Here\",\n          controllerName: \"Surname\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }, this), countries.length > 0 && /*#__PURE__*/_jsxDEV(DropdownSelection, {\n          label: \"Countries\",\n          data: countries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DateSelection, {\n          label: \"Birthday\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"client-form--submition\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            onClick: handleOnSave,\n            children: t('global:action.save')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"client-form--alert\",\n          children: /*#__PURE__*/_jsxDEV(AlertMessage, {\n            message: alert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ClientForm, \"E3k3HEUIyW517FN2wr4F/DEuc+s=\", false, function () {\n  return [useTranslation, useCountries, useForm, useClientStore];\n});\n\n_c = ClientForm;\nexport default ClientForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientForm\");","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/challenge/src/pages/MainPage/ClientForm/ClientForm.tsx"],"names":["React","useState","Button","TextInput","DropdownSelection","DateSelection","AlertMessage","useClientStore","useCountries","useForm","FormProvider","yupResolver","yup","FormControl","useTranslation","schema","object","Name","string","required","trim","Surname","country","birthday","date","getInitialState","undefined","ClientForm","clients","setClients","t","alert","setAlert","countries","defaultValues","methods","mode","reValidateMode","criteriaMode","resolver","watch","formState","errors","setError","formData","name","setName","surname","setSurname","setCountry","setBirthday","state","length","handleOnSave"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Button from \"@mui/material/Button\";\nimport { TextInput, DropdownSelection, DateSelection, AlertMessage } from \"../../../components\";\nimport './ClientForm.css';\nimport { useClientStore } from '../../../store';\nimport { useCountries } from '../../../hooks';\nimport { Client } from '../';\nimport { format } from \"date-fns\";\nimport { useForm, FormProvider } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { FormControl } from '@mui/material';\nimport { useTranslation } from \"react-i18next\";\n\nconst schema = yupResolver(yup\n  .object({\n    Name: yup.string().required().trim(),\n    Surname: yup.string().required().trim(),\n    country: yup.string().required().trim(),\n    birthday: yup.date().required(),\n  })\n  .required());\n\ninterface InitialState {\n  Name: string;\n  Surname: string;\n  country: string;\n  birthday?: string;\n}\n\nconst getInitialState = (): InitialState => ({\n  Name: '',\n  Surname: '',\n  country: '',\n  birthday: undefined,\n});\n\ntype Props = {\n  clients: Client[];\n  setClients: (value: Client[]) => void;\n};\n\n\nconst ClientForm: React.FC<Props> = ({ clients, setClients }) => {\n  const { t } = useTranslation();\n  const [alert, setAlert] = useState<string>();\n  const countries = useCountries();\n  const defaultValues = getInitialState();\n\n  const methods = useForm({\n    mode: \"onChange\",\n    reValidateMode: \"onChange\",\n    criteriaMode: \"all\",\n    resolver: schema,\n    defaultValues,\n  });\n\n  const { watch, formState:{ errors }, setError } = methods;\n  const formData = watch();\n\n  const {\n    name,\n    setName,\n    surname,\n    setSurname,\n    country,\n    setCountry,\n    birthday,\n    setBirthday,\n  } = useClientStore((state) => ({\n    name: state.name,\n    setName: state.setName,\n    surname: state.surname,\n    setSurname: state.setSurname,\n    country: state.country,\n    setCountry: state.setCountry,\n    birthday: state.birthday,\n    setBirthday: state.setBirthday\n  }));\n\n /*  const handleOnSave = () => {\n\n     if (formData.country === \"\"){\n       setError(\n         \"country\",\n         { type: \"focus\", message: t(\"clients:error\") },\n         { shouldFocus: true }\n       );\n       return;\n    }\n\n    \n\n     if (formData.birthday === \"\" || formData.birthday === undefined) {\n       setError(\n         \"birthday\",\n         { type: \"focus\", message: t(\"clients:error\") },\n         { shouldFocus: true }\n       );\n      return;\n      }\n\n      if (Object.keys(errors).length > 0) return;\n\n    const newClient = {\n      name: formData.Name,\n      surname: formData.Surname,\n      country: formData.country,\n      birthday: formData.birthday,\n    };\n\n    const birthdayDate = new Date(newClient.birthday);\n    const yearsOld = parseInt(format(new Date(), \"yyyy\")) - parseInt(format(birthdayDate, \"yyyy\"));\n    const birthdayDay = format(birthdayDate, \"dd\");\n    const birthdayMonth = format(birthdayDate, \"MM\");\n\n    const newAlert = t(\n      \"clients:form.alert\",\n      { name, country, birthdayDay, birthdayMonth, yearsOld }\n    );\n  \n    setAlert(newAlert);\n    setClients([...clients, newClient]);\n    setName(newClient.name);\n    setSurname(newClient.surname);\n    setCountry(newClient.country);\n    setBirthday(newClient.birthday);\n  };\n   */\n\n      return (\n        <FormProvider {...methods}>\n            <div className=\"client-form\">\n          <FormControl>\n              <TextInput\n                label={\"Name\"}\n                defaultValue={\"Name Here\"}\n                controllerName={\"Name\"}\n              />\n              {\n                <TextInput\n                  label={\"Surname\"}\n                  defaultValue={\"Name Here\"}\n                  controllerName={\"Surname\"}\n                />\n              }\n              {countries.length > 0 && (\n                <DropdownSelection label={\"Countries\"} data={countries} />\n              )}\n              <DateSelection label={\"Birthday\"} />\n              <div className=\"client-form--submition\">\n                <Button variant=\"outlined\" onClick={handleOnSave}>\n                  {t('global:action.save')}\n                </Button>\n              </div>\n              <div className=\"client-form--alert\">\n                <AlertMessage message={alert} />\n              </div>\n          </FormControl>\n            </div>\n        </FormProvider>\n      );\n    };\n\nexport default ClientForm;\n"]},"metadata":{},"sourceType":"module"}