{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { getFlights } from \"../api\";\n\nconst useFlights = params => {\n  _s();\n\n  const {\n    offset,\n    limit\n  } = params;\n  const {\n    data: flights,\n    isFetching\n  } = useQuery(\"flights\", () => getFlights(params), {\n    refetchOnWindowFocus: false,\n    staleTime: 60000\n  });\n  if (isFetching) return {\n    isLoadingFlights: isFetching,\n    flights: []\n  };\n  return {\n    flights: flights.data.slice(offset, limit)\n  };\n};\n\n_s(useFlights, \"BHPd9qoNvvj+4MkourtRIKPaqYE=\", false, function () {\n  return [useQuery];\n});\n\nexport default useFlights;","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/aircrafts-scheduling/src/hooks/useFlights.ts"],"names":["useQuery","getFlights","useFlights","params","offset","limit","data","flights","isFetching","refetchOnWindowFocus","staleTime","isLoadingFlights","slice"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,UAAT,QAA2B,QAA3B;;AAYA,MAAMC,UAAgB,GAAIC,MAAD,IAAY;AAAA;;AACnC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBF,MAA1B;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC,OAAR;AAAiBC,IAAAA;AAAjB,MAAgCR,QAAQ,CAAM,SAAN,EAAiB,MAAMC,UAAU,CAACE,MAAD,CAAjC,EAA2C;AACvFM,IAAAA,oBAAoB,EAAE,KADiE;AAEvFC,IAAAA,SAAS,EAAE;AAF4E,GAA3C,CAA9C;AAKA,MAAIF,UAAJ,EAAgB,OAAO;AAAEG,IAAAA,gBAAgB,EAAEH,UAApB;AAAgCD,IAAAA,OAAO,EAAE;AAAzC,GAAP;AAEhB,SAAO;AAAEA,IAAAA,OAAO,EAAEA,OAAO,CAACD,IAAR,CAAaM,KAAb,CAAmBR,MAAnB,EAA2BC,KAA3B;AAAX,GAAP;AACD,CAXD;;GAAMH,U;UAGkCF,Q;;;AAUxC,eAAeE,UAAf","sourcesContent":["import { useQuery } from \"react-query\";\nimport { getFlights } from \"../api\";\nimport { Flight } from \"../pages/MainPage/types\";\n\ntype HookParams = {\n  offset: number;\n  limit: number;\n};\n\ntype Hook = (\n  params: HookParams\n) => { isLoadingFlights?: boolean; flights: Flight[] };\n\nconst useFlights: Hook = (params) => {\n  const { offset, limit } = params;\n\n  const { data: flights, isFetching } = useQuery<any>(\"flights\", () => getFlights(params), {\n    refetchOnWindowFocus: false,\n    staleTime: 60000,\n  });\n\n  if (isFetching) return { isLoadingFlights: isFetching, flights: [] };\n\n  return { flights: flights.data.slice(offset, limit) };\n};\n\nexport default useFlights;\n"]},"metadata":{},"sourceType":"module"}