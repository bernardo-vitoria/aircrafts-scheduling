{"ast":null,"code":"import create from \"zustand\";\nconst useRotationStack = create(set => ({\n  flightsRotation: [],\n  addFlightToRotation: value => set(state => {\n    console.log(flightsRotation);\n    return {\n      flightsRotation: [...state.flightsRotation, value].sort((a, b) => a.departuretime < b.departuretime ? -1 : 0),\n      availableFlights: state.availableFlights.filter(flight => flight.id !== value.id)\n    };\n  }),\n  removeFlightFromRotation: value => set(state => ({\n    flightsRotation: state.flightsRotation.filter(({\n      id\n    }) => value.id !== id),\n    availableFlights: [...state.availableFlights, value]\n  })),\n  selectedAircraft: undefined,\n  setSelectedAircraft: value => set({\n    selectedAircraft: value\n  }),\n  availableFlights: [],\n  setAvailableFlights: value => set({\n    availableFlights: value\n  })\n}));\nexport default useRotationStack;","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/aircraft-scheduling/src/store/useRotationStack.ts"],"names":["create","useRotationStack","set","flightsRotation","addFlightToRotation","value","state","console","log","sort","a","b","departuretime","availableFlights","filter","flight","id","removeFlightFromRotation","selectedAircraft","undefined","setSelectedAircraft","setAvailableFlights"],"mappings":"AAAA,OAAOA,MAAP,MAAiC,SAAjC;AAaA,MAAMC,gBAAgB,GAAGD,MAAM,CAC5BE,GAAD,KAAmC;AACjCC,EAAAA,eAAe,EAAE,EADgB;AAEjCC,EAAAA,mBAAmB,EAAGC,KAAD,IACnBH,GAAG,CAAEI,KAAD,IAAW;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYL,eAAZ;AAEA,WAAO;AACLA,MAAAA,eAAe,EAAE,CAAC,GAAGG,KAAK,CAACH,eAAV,EAA2BE,KAA3B,EAAkCI,IAAlC,CAAuC,CAACC,CAAD,EAAIC,CAAJ,KACtDD,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAApB,GAAoC,CAAC,CAArC,GAAyC,CAD1B,CADZ;AAILC,MAAAA,gBAAgB,EAAEP,KAAK,CAACO,gBAAN,CAAuBC,MAAvB,CACfC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcX,KAAK,CAACW,EADhB;AAJb,KAAP;AAOG,GAVF,CAH4B;AAcjCC,EAAAA,wBAAwB,EAAGZ,KAAD,IACxBH,GAAG,CAAEI,KAAD,KAAY;AACdH,IAAAA,eAAe,EAAEG,KAAK,CAACH,eAAN,CAAsBW,MAAtB,CAA6B,CAAC;AAACE,MAAAA;AAAD,KAAD,KAAUX,KAAK,CAACW,EAAN,KAAYA,EAAnD,CADH;AAEdH,IAAAA,gBAAgB,EAAE,CAAC,GAAGP,KAAK,CAACO,gBAAV,EAA4BR,KAA5B;AAFJ,GAAZ,CAAD,CAf4B;AAmBjCa,EAAAA,gBAAgB,EAAEC,SAnBe;AAoBjCC,EAAAA,mBAAmB,EAAGf,KAAD,IAAWH,GAAG,CAAC;AAAEgB,IAAAA,gBAAgB,EAAEb;AAApB,GAAD,CApBF;AAqBjCQ,EAAAA,gBAAgB,EAAE,EArBe;AAsBjCQ,EAAAA,mBAAmB,EAAGhB,KAAD,IAAWH,GAAG,CAAC;AAAEW,IAAAA,gBAAgB,EAAER;AAApB,GAAD;AAtBF,CAAnC,CAD6B,CAA/B;AA2BA,eAAeJ,gBAAf","sourcesContent":["import create, { SetState } from \"zustand\";\nimport { Aircraft, Flight } from \"../pages/MainPage/types\";\n\ntype RotationStack = {\n  availableFlights: Flight[];\n  setAvailableFlights: (flights: Flight[]) => void;\n  flightsRotation: Flight[];\n  addFlightToRotation: (flight: Flight) => void;\n  removeFlightFromRotation: (flight: Flight) => void;\n  selectedAircraft?: Aircraft;\n  setSelectedAircraft: (aircraft: Aircraft) => void;\n};\n\nconst useRotationStack = create<RotationStack>(\n  (set: SetState<RotationStack>) => ({\n    flightsRotation: [],\n    addFlightToRotation: (value) =>\n      set((state) => {\n        console.log(flightsRotation);\n        \n        return {\n          flightsRotation: [...state.flightsRotation, value].sort((a, b) =>\n            a.departuretime < b.departuretime ? -1 : 0\n          ),\n          availableFlights: state.availableFlights.filter(\n            (flight) => flight.id !== value.id\n          ),\n        };}),\n    removeFlightFromRotation: (value) =>\n      set((state) => ({\n        flightsRotation: state.flightsRotation.filter(({id}) => value.id !==id),\n        availableFlights: [...state.availableFlights, value],\n      })),\n    selectedAircraft: undefined,\n    setSelectedAircraft: (value) => set({ selectedAircraft: value }),\n    availableFlights: [],\n    setAvailableFlights: (value) => set({ availableFlights: value }),\n  })\n);\n\nexport default useRotationStack;\n"]},"metadata":{},"sourceType":"module"}