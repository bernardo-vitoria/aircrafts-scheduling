{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { getAircrafts } from \"../api\";\n\nconst useAircrafts = params => {\n  _s();\n\n  const {\n    offset,\n    limit\n  } = params;\n  const {\n    data: aircrafts,\n    isFetching\n  } = useQuery(\"aircrafts\", () => getAircrafts(params), {\n    refetchOnWindowFocus: false,\n    staleTime: 60000\n  });\n  if (isFetching) return {\n    isLoadingAircrafts: isFetching,\n    aircrafts: []\n  };\n  return {\n    aircrafts: aircrafts.data.slice(offset, limit)\n  };\n};\n\n_s(useAircrafts, \"OpQWN6TNnaCylPIgcuM2rKiGnuk=\", false, function () {\n  return [useQuery];\n});\n\nexport default useAircrafts;","map":{"version":3,"sources":["/Users/bernardo.vitoria/projects/FE/aircraft-scheduling/src/hooks/useAircrafts.ts"],"names":["useQuery","getAircrafts","useAircrafts","params","offset","limit","data","aircrafts","isFetching","refetchOnWindowFocus","staleTime","isLoadingAircrafts","slice"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,QAA6B,QAA7B;;AASA,MAAMC,YAAkB,GAAIC,MAAD,IAAY;AAAA;;AACrC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBF,MAA1B;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC,SAAR;AAAmBC,IAAAA;AAAnB,MAAkCR,QAAQ,CAAM,WAAN,EAAmB,MAAMC,YAAY,CAACE,MAAD,CAArC,EAA+C;AAC7FM,IAAAA,oBAAoB,EAAE,KADuE;AAE7FC,IAAAA,SAAS,EAAE;AAFkF,GAA/C,CAAhD;AAKA,MAAIF,UAAJ,EAAgB,OAAO;AAAEG,IAAAA,kBAAkB,EAAEH,UAAtB;AAAkCD,IAAAA,SAAS,EAAE;AAA7C,GAAP;AAEhB,SAAO;AAAEA,IAAAA,SAAS,EAAEA,SAAS,CAACD,IAAV,CAAeM,KAAf,CAAqBR,MAArB,EAA6BC,KAA7B;AAAb,GAAP;AACD,CAXD;;GAAMH,Y;UAGoCF,Q;;;AAU1C,eAAeE,YAAf","sourcesContent":["import { useQuery } from \"react-query\";\nimport { getAircrafts } from \"../api\";\n\ntype HookParams = {\n  offset: number;\n  limit: number;\n};\n\ntype Hook = (params: HookParams) => any;\n\nconst useAircrafts: Hook = (params) => {\n  const { offset, limit } = params;\n\n  const { data: aircrafts, isFetching } = useQuery<any>(\"aircrafts\", () => getAircrafts(params), {\n    refetchOnWindowFocus: false,\n    staleTime: 60000,\n  });\n\n  if (isFetching) return { isLoadingAircrafts: isFetching, aircrafts: [] };\n\n  return { aircrafts: aircrafts.data.slice(offset, limit) };\n};\n\nexport default useAircrafts;\n"]},"metadata":{},"sourceType":"module"}