{"version":3,"file":"react-query-core.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport { EnsuredQueryKey } from './types'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureQueryKeyArray<T extends QueryKey>(\n  value: T\n): EnsuredQueryKey<T> {\n  return (Array.isArray(value)\n    ? value\n    : ([value] as unknown)) as EnsuredQueryKey<T>\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs(\n  arg1?: QueryKey | MutationFilters,\n  arg2?: MutationFilters\n): MutationFilters | undefined {\n  return isQueryKey(arg1) ? { ...arg2, mutationKey: arg1 } : arg1\n}\n\nexport function mapQueryStatusFilter(\n  active?: boolean,\n  inactive?: boolean\n): QueryStatusFilter {\n  if (\n    (active === true && inactive === true) ||\n    (active == null && inactive == null)\n  ) {\n    return 'all'\n  } else if (active === false && inactive === false) {\n    return 'none'\n  } else {\n    // At this point, active|inactive can only be true|false or false|true\n    // so, when only one value is provided, the missing one has to be the negated value\n    const isActive = active ?? !inactive\n    return isActive ? 'active' : 'inactive'\n  }\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  const queryStatusFilter = mapQueryStatusFilter(active, inactive)\n\n  if (queryStatusFilter === 'none') {\n    return false\n  } else if (queryStatusFilter !== 'all') {\n    const isActive = query.isActive()\n    if (queryStatusFilter === 'active' && !isActive) {\n      return false\n    }\n    if (queryStatusFilter === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = ensureQueryKeyArray(queryKey)\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setFocused: (focused?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: (online?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  private abort?: () => void\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.abort = config.abort\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          this.abort?.()\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nexport class NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  getAbortController,\n  Updater,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n  ensureQueryKeyArray,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  EnsuredQueryKey,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: EnsuredQueryKey<TQueryKey>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n  meta: QueryMeta | undefined\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n  private hadObservers: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    this.abortSignalConsumed = false\n    this.hadObservers = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.isFetching) {\n        if (this.hadObservers) {\n          this.scheduleGc()\n        }\n      } else {\n        this.cache.remove(this)\n      }\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n      this.hadObservers = true\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    const queryKey = ensureQueryKeyArray(this.queryKey)\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    Object.defineProperty(queryFnContext, 'signal', {\n      enumerable: true,\n      get: () => {\n        if (abortController) {\n          this.abortSignalConsumed = true\n          return abortController.signal\n        }\n        return undefined\n      },\n    })\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort?.bind(abortController),\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n        // Notify cache callback\n        this.mutationCache.config.onSuccess?.(\n          data,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\nimport { getAbortController } from './utils'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const abortController = getAbortController()\n        const abortSignal = abortController?.signal\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            signal: abortSignal,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          abortController?.abort()\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions } from './types'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      // if filters.refetchActive is not provided and filters.active is explicitly false,\n      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries\n      active: filters.refetchActive ?? filters.active ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query =>\n        query.fetch(undefined, {\n          ...options,\n          meta: { refetchPage: filters?.refetchPage },\n        })\n      )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { RefetchQueryFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\nimport { isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: Error | null\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    defaultedOptions: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    const trackProp = (key: keyof QueryObserverResult) => {\n      if (!this.trackedProps.includes(key)) {\n        this.trackedProps.push(key)\n      }\n    }\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          trackProp(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    if (defaultedOptions.useErrorBoundary || defaultedOptions.suspense) {\n      trackProp('error')\n    }\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>(\n    options?: RefetchOptions & RefetchQueryFilters<TPageData>\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage: options?.refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select &&\n        !this.previousSelectError\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          this.previousSelectError = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      (status === 'loading' || status === 'idle')\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.previousSelectError = null\n          } catch (selectError) {\n            getLogger().error(selectError)\n            error = selectError\n            this.previousSelectError = selectError\n            errorUpdatedAt = Date.now()\n            status = 'error'\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense ||\n      query.state.status !== 'error' ||\n      prevOptions.enabled === false) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map((options, index) => {\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      return this.getObserver(defaultedOptions, index).getOptimisticResult(\n        defaultedOptions\n      )\n    })\n  }\n\n  private getObserver(\n    options: QueryObserverOptions,\n    index: number\n  ): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    let currentObserver = this.observersMap[defaultedOptions.queryHash!]\n    if (!currentObserver && defaultedOptions.keepPreviousData) {\n      currentObserver = this.observers[index]\n    }\n    return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const prevObserversMap = this.observersMap\n\n      const newResult: QueryObserverResult[] = []\n      const newObservers: QueryObserver[] = []\n      const newObserversMap: Record<string, QueryObserver> = {}\n\n      this.queries.forEach((options, i) => {\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const queryHash = defaultedOptions.queryHash!\n        const observer = this.getObserver(defaultedOptions, i)\n\n        if (prevObserversMap[queryHash] || defaultedOptions.keepPreviousData) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n        }\n\n        if (observer !== prevObservers[i]) {\n          hasIndexChange = true\n        }\n\n        newObservers.push(observer)\n        newResult.push(observer.getCurrentResult())\n        newObserversMap[queryHash] = observer\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior(),\n    })\n  }\n\n  getOptimisticResult(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: options?.cancelRefetch ?? true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: options?.cancelRefetch ?? true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options?: DehydrateOptions\n): DehydratedState {\n  options = options || {}\n\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options?.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options?.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","undefined","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureQueryKeyArray","Array","isArray","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","mapQueryStatusFilter","active","inactive","isActive","matchQuery","filters","query","exact","fetching","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","queryStatusFilter","isStale","isFetching","matchMutation","mutation","mutationKey","hashQueryKey","state","status","hashFn","queryKeyHashFn","asArray","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","then","catch","error","getAbortController","AbortController","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","abort","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","notifyManager","logger","console","getLogger","setLogger","newLogger","Query","abortSignalConsumed","hadObservers","defaultOptions","setOptions","observers","cache","initialState","getDefaultState","meta","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","getObserversCount","invalidate","fetch","fetchOptions","cancelRefetch","abortController","queryFnContext","pageParam","defineProperty","enumerable","get","signal","fetchFn","context","behavior","onFetch","revertState","fetchMeta","bind","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","mutationFn","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","abortSignal","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","manual","queryFnResult","promiseAsAny","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","shouldFetchNextPage","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isMutating","getQueryData","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","previousSelectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","clearTimers","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","trackProp","configurable","useErrorBoundary","suspense","getNextResult","unsubscribe","getCurrentQuery","fetchOptimistic","clearStaleTimeout","time","staleTimeoutId","refetchInterval","nextInterval","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","typedKey","changed","isIncluded","isExcluded","defaultNotifyOptions","shouldLoadOnMount","retryOnMount","shouldRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","getObserver","currentObserver","hasIndexChange","prevObservers","prevObserversMap","newResult","newObservers","newObserversMap","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","dehydrateMutation","dehydrateQuery","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","dehydrateMutations","shouldDehydrateMutation","dehydrateQueries","shouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","dehydratedQuery"],"mappings":"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"}